import { aql, db } from "../../../../db/arangodb.js";

const loanExploitationResolver = {
  loanExploitationCreate: async ({
    loanFileKey,
    exploitationType,
    activityKey,
    designation,
    quantity,
    prixUnit,
    total,
  }) => {
    if (designation.length > 0) {
      var objArr = [];

      for (let index = 0; index < designation.length; index++) {
        const itemName = designation[index];
        const qty = quantity[index];
        const tot = total[index];
        const prix = prixUnit[index];

        const obj = {
          timeStamp: Date.now(),
          loanFileKey: loanFileKey,
          exploitationType: exploitationType,
          activityKey: activityKey,
          designation: itemName,
          quantity: qty,
          prixUnit: prix,
          total: tot,
        };
        // add object to array
        objArr.push(obj);
      }

      if (objArr.length > 0) {
        const doc_cursor = await db.query(aql`FOR o IN ${objArr} 
        INSERT o INTO loan_exploitation RETURN NEW`);
        if (doc_cursor.hasNext) {
          return "SUCCESS";
        } else {
          throw new Error(
            `Erreur lors de la création de la ${exploitationType} d'exploitation`
          );
        }
      } else {
        throw new Error(
          `Erreur lors de la composition des éléments. Essayez de nouveau`
        );
      }
    } else {
      throw new Error(`Vous devez renseigner au moins un élément`);
    }
  },

  loanExploitationUpdate: async ({
    exploitationKey,
    designation,
    quantity,
    prixUnit,
    total,
  }) => {
    const obj = {
      designation: designation,
      quantity: quantity,
      prixUnit: prixUnit,
      total: total,
    };
    const doc_cursor = await db.query(aql`FOR e IN loan_exploitation 
    FILTER e._key == ${exploitationKey} UPDATE ${exploitationKey} 
    WITH ${obj} IN loan_exploitation RETURN NEW`);
    if (doc_cursor.hasNext) {
      return "SUCCESS";
    } else {
      throw new Error(`Erreur lors de la mise à jour : ${exploitationKey}`);
    }
  },

  loanExploitationDelete: async ({ exploitationKey }) => {
    const doc_cursor = await db.query(aql`FOR e IN loan_exploitation 
    FILTER e._key == ${exploitationKey} REMOVE ${exploitationKey} 
    IN loan_exploitation RETURN OLD`);
    if (doc_cursor.hasNext) {
      return "SUCCESS";
    } else {
      throw new Error(
        `Erreur lors de la suppression de l'exploitation : ${exploitationKey}`
      );
    }
  },
};

export default loanExploitationResolver;
